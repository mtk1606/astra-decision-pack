import json
import os
import re
import time
from datetime import datetime, timezone
from typing import Dict, Any, List, Optional, Tuple
from urllib.parse import urlparse


def now_stamp() -> str:
    return datetime.now(timezone.utc).strftime("%Y%m%dT%H%M%SZ")


def slugify(text: str) -> str:
    """Convert text to URL-safe slug"""
    # Remove special chars, replace spaces with hyphens, lowercase
    slug = re.sub(r'[^\w\s-]', '', text.lower())
    slug = re.sub(r'[-\s]+', '-', slug)
    return slug.strip('-')


def load_decision_pack(pack_path: str) -> Dict[str, Any]:
    """Load Decision Pack JSON file"""
    if not os.path.exists(pack_path):
        raise FileNotFoundError(f"Decision Pack not found: {pack_path}")
    
    with open(pack_path, "r", encoding="utf-8") as f:
        return json.load(f)


def generate_pr_content(pack: Dict[str, Any], domain: str) -> Dict[str, Any]:
    """Generate PR content from Decision Pack"""
    title = pack.get("title", f"Growth experiment for {domain}")
    slug = slugify(title)
    stamp = now_stamp()
    branch_name = f"play/{slug}-{stamp}"
    
    # Generate file paths
    pack_filename = f"decision_packs/{domain}_{stamp}.json"
    lp_filename = f"landing_pages/{domain}_{stamp}.html"
    
    # Generate commit message
    hypothesis = pack.get("hypothesis", "")
    expected_lift = pack.get("expected_lift", {})
    lift_text = f"{expected_lift.get('level', 'medium')} lift on {expected_lift.get('metric', 'conversion')}"
    
    commit_message = f"Add growth experiment: {title}\n\nHypothesis: {hypothesis[:100]}...\nExpected: {lift_text}"
    
    return {
        "branch_name": branch_name,
        "title": title,
        "files": {
            "decision_pack": pack_filename,
            "landing_page": lp_filename
        },
        "commit_message": commit_message,
        "domain": domain,
        "slug": slug,
        "stamp": stamp
    }


def load_pr_template() -> str:
    """Load PR template from file"""
    template_path = os.path.join(os.path.dirname(__file__), "..", "PR_Grok_Play.txt")
    if os.path.exists(template_path):
        with open(template_path, "r", encoding="utf-8") as f:
            return f.read()
    
    # Fallback template
    return """## Growth Experiment

This PR implements a growth experiment based on competitor signal analysis.

### Hypothesis
{hypothesis}

### Expected Impact
- **Lift Level**: {lift_level}
- **Metric**: {metric}
- **Confidence**: {confidence}

### Assets Added
- Decision Pack: `{pack_file}`
- Landing Page: `{lp_file}`

### Next Steps
1. Review the Decision Pack for experiment details
2. Test the landing page
3. Monitor metrics and iterate

---
*Generated by GrowthSignal*"""


def create_github_pr(content: Dict[str, Any], pack: Dict[str, Any], lp_html: str, 
                    github_token: str, repo: str) -> str:
    """Create GitHub PR using API"""
    try:
        from github import Github
    except ImportError:
        raise ImportError("PyGithub not installed. Run: pip install PyGithub")
    
    g = Github(github_token)
    
    # Parse repo owner/name
    if "/" not in repo:
        raise ValueError("GITHUB_REPO must be in format 'owner/repo'")
    owner, repo_name = repo.split("/", 1)
    
    # Get repository
    try:
        repository = g.get_repo(repo)
    except Exception as e:
        raise RuntimeError(f"Failed to access repository {repo}: {str(e)}")
    
    # Check if branch already exists
    branch_name = content["branch_name"]
    try:
        repository.get_branch(branch_name)
        # Branch exists, append suffix
        branch_name = f"{content['branch_name']}-{int(time.time())}"
        content["branch_name"] = branch_name
    except:
        pass  # Branch doesn't exist, proceed
    
    # Create branch from main
    try:
        main_branch = repository.get_branch("main")
        repository.create_git_ref(f"refs/heads/{branch_name}", main_branch.commit.sha)
    except Exception as e:
        raise RuntimeError(f"Failed to create branch {branch_name}: {str(e)}")
    
    # Create files
    files_to_create = {
        content["files"]["decision_pack"]: json.dumps(pack, indent=2),
        content["files"]["landing_page"]: lp_html
    }
    
    for file_path, file_content in files_to_create.items():
        try:
            repository.create_file(
                path=file_path,
                message=f"Add {os.path.basename(file_path)}",
                content=file_content.encode('utf-8'),
                branch=branch_name
            )
        except Exception as e:
            raise RuntimeError(f"Failed to create file {file_path}: {str(e)}")
    
    # Create PR
    try:
        template = load_pr_template()
        pr_body = template.format(
            hypothesis=pack.get("hypothesis", ""),
            lift_level=pack.get("expected_lift", {}).get("level", "medium"),
            metric=pack.get("expected_lift", {}).get("metric", "conversion"),
            confidence=pack.get("confidence", "Medium"),
            pack_file=content["files"]["decision_pack"],
            lp_file=content["files"]["landing_page"]
        )
        
        pr = repository.create_pull(
            title=f"ðŸš€ {content['title']}",
            body=pr_body,
            head=branch_name,
            base="main"
        )
        
        return pr.html_url
        
    except Exception as e:
        raise RuntimeError(f"Failed to create PR: {str(e)}")


def write_preview(content: Dict[str, Any], pack: Dict[str, Any], lp_html: str, 
                 output_dir: str) -> str:
    """Write PR preview to JSON file"""
    os.makedirs(output_dir, exist_ok=True)
    
    # Create diff-like content
    pack_diff = f"+++ {content['files']['decision_pack']}\n{json.dumps(pack, indent=2)}"
    lp_diff = f"+++ {content['files']['landing_page']}\n{lp_html}"
    
    preview = {
        "branch_name": content["branch_name"],
        "title": content["title"],
        "commit_message": content["commit_message"],
        "files": content["files"],
        "diffs": {
            "decision_pack": pack_diff,
            "landing_page": lp_diff
        },
        "metadata": {
            "domain": content["domain"],
            "created_at": now_stamp(),
            "mode": "preview"
        }
    }
    
    filename = f"{content['slug']}_pr_preview.json"
    filepath = os.path.join(output_dir, filename)
    
    with open(filepath, "w", encoding="utf-8") as f:
        json.dump(preview, f, ensure_ascii=False, indent=2)
    
    return filepath


def preview_or_create_pr(pack_path: str, lp_html: str, domain: str, 
                        github_token: Optional[str] = None, 
                        github_repo: Optional[str] = None) -> Dict[str, Any]:
    """
    Main function to preview or create PR
    
    Returns:
        Dict with keys:
        - success: bool
        - mode: "preview" or "pr_created"
        - message: str
        - url: str (for PR) or filepath (for preview)
    """
    try:
        # Load decision pack
        pack = load_decision_pack(pack_path)
        
        # Generate PR content
        content = generate_pr_content(pack, domain)
        
        # Check if we can create actual PR
        if github_token and github_repo:
            try:
                pr_url = create_github_pr(content, pack, lp_html, github_token, github_repo)
                return {
                    "success": True,
                    "mode": "pr_created",
                    "message": f"PR created successfully: {content['title']}",
                    "url": pr_url,
                    "branch": content["branch_name"]
                }
            except Exception as e:
                # Fall back to preview mode
                output_dir = os.path.join(os.path.dirname(pack_path), "..", "previews")
                preview_path = write_preview(content, pack, lp_html, output_dir)
                return {
                    "success": True,
                    "mode": "preview",
                    "message": f"PR preview created (GitHub error: {str(e)})",
                    "url": preview_path,
                    "branch": content["branch_name"]
                }
        else:
            # Preview mode
            output_dir = os.path.join(os.path.dirname(pack_path), "..", "previews")
            preview_path = write_preview(content, pack, lp_html, output_dir)
            return {
                "success": True,
                "mode": "preview",
                "message": "PR preview created (no GitHub token)",
                "url": preview_path,
                "branch": content["branch_name"]
            }
            
    except Exception as e:
        return {
            "success": False,
            "mode": "error",
            "message": f"Failed to process PR: {str(e)}",
            "url": None,
            "branch": None
        }


if __name__ == "__main__":
    # CLI for testing
    import argparse
    
    parser = argparse.ArgumentParser(description="PR Executor for GrowthSignal")
    parser.add_argument("pack_path", help="Path to Decision Pack JSON")
    parser.add_argument("--lp-html", help="Landing page HTML content")
    parser.add_argument("--domain", help="Domain name")
    parser.add_argument("--github-token", help="GitHub token")
    parser.add_argument("--github-repo", help="GitHub repo (owner/repo)")
    
    args = parser.parse_args()
    
    # Default LP HTML if not provided
    lp_html = args.lp_html or "<html><body><h1>Landing Page</h1></body></html>"
    domain = args.domain or "example.com"
    
    result = preview_or_create_pr(
        args.pack_path, 
        lp_html, 
        domain,
        args.github_token,
        args.github_repo
    )
    
    print(json.dumps(result, indent=2))
